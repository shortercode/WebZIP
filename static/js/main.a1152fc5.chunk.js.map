{"version":3,"sources":["fonts/Oswald-Medium.ttf","fonts/SourceCodePro-Medium.ttf","zip_default.js","components/Toolbar.tsx","components/Button.tsx","components/LoadArchive.tsx","components/Dialog.tsx","components/MenuDialog.tsx","components/EntryList.tsx","components/TextField.tsx","components/NewFileDialog.tsx","components/NewFolderDialog.tsx","components/Download.tsx","components/DownloadDialog.tsx","components/ShowArchive.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","encoder","TextEncoder","decoder","TextDecoder","encode_utf8_string","str","encode","decode_utf8_string","buffer","offset","length","view","Uint8Array","decode","compression_function","decompression_function","AssertionError","Error","assert","test","msg","dos_time_from_date","input","hours","getHours","minutes","getMinutes","seconds","getSeconds","getFullYear","getMonth","getDate","inflated_entries","WeakMap","ZipEntry","blob","compression_type","size","crc","this","internal_file_attr","external_file_attr","bit_flag","modified","Date","compression","blob_slice","uncompressed_size","copy","getTime","comment","slice","extra","existing","get","get_blob","result","set","filename","encoded_filename","N","M","ArrayBuffer","DataView","uintview","date","time","setUint32","setUint16","compressed_size","local_position","K","decompress","Response","arrayBuffer","text","CRC_LOOKUP","Uint32Array","crc32","bytes","v","BlobSlice","start","end","is_whole","support_performance","performance","last_system_time","get_increasing_time","now","system_time","pause","duration","a","Promise","resolve","setTimeout","cached_worker","ZipArchive","entries","Map","file_name","norm_name","normalise_file_name","trimmed_name","endsWith","verify_path","has","delete","file","Blob","calculate_crc","set_internal","existing_entry","empty_file","entry","from","to","is_folder","source","clone","is_compressed","original_size","compress_blob","deflated_blob","byteLength","parts","directories","name","location","local","generate_local","get_backing_object","push","data_descriptor","generate_data_descriptor","cd","generate_cd","cd_offset","cd_length","eocdr","generate_eocdr","Array","values","cd_location","cd_size","records","compresion","norm_file_name","replace","part_regex","split","part","archive","eocdr_position","find_eocdr","read_eocdr","position","task_start_time","getUint32","read_cd","set_folder","read_local","data_location","flag","internal","external","zip_entry","current_time","fn","set_compression_function","set_decompression_function","version","getUint16","name_length","extra_length","min_version","comment_length","disk","i","start_disk","disk_entries","total_entries","queue","get_worker","type","url","URL","createObjectURL","worker","Worker","addEventListener","e","data","shift","resolver","create_worker","postMessage","operation","Toolbar","children","className","Button","onClick","onChange","focusable","disabled","tabIndex","data-disabled","LoadArchive","setArchive","useState","isBusy","setBusy","errMessage","setError","isDragActive","setDragActive","attempt_read_archive","from_blob","files","target","onDrop","preventDefault","data_transfer","items","item","kind","getAsFile","files_from_data_transfer","dataTransfer","onDragOver","onDragLeave","Dialog","open","handleClose","MenuDialog","onClose","EntryList","cwd","setCWD","setDownload","deleteFile","menuEntry","setMenuEntry","filtered_entries","cwd_path","path","startsWith","relative_path","slash_index","indexOf","onDoubleClick","isFolder","onRightClick","downloadEntry","getBlob","createMenu","map","EntryListRow","onContextMenu","key","style","width","Math","floor","TextField","value","label","error","NewFileDialog","setFilename","setFile","handleCancel","invalidFilename","trim","validateFilename","isDisabled","NewFolderDialog","foldername","setFoldername","Download","download","href","DownloadDialog","default_filename","setURL","useEffect","revokeObjectURL","ShowArchive","changeIndex","setChangeIndex","isCreateFileOpen","setCreateFileOpen","isCreateFolderOpen","setCreateFolderOpen","incrementChange","onCreateFile","isRoot","lastIndexOf","getFileName","sort","b","sortEntries","getArchiveEntries","download_dialog","to_blob","window","confirm","App","initial_archive","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a1152fc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Oswald-Medium.df16477d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/SourceCodePro-Medium.f621c504.ttf\";","const HEADER_CD = 0x02014b50;\nconst HEADER_LOCAL = 0x04034b50;\nconst HEADER_EOCDR = 0x06054b50;\nconst HEADER_DATA_DESCRIPTOR = 0x08074b50;\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nfunction encode_utf8_string(str) {\n    return encoder.encode(str);\n}\nfunction decode_utf8_string(buffer, offset, length) {\n    const view = new Uint8Array(buffer, offset, length);\n    return decoder.decode(view);\n}\n\nclass AssertionError extends Error {\n}\nfunction assert(test, msg) {\n    if (test === false) {\n        throw new AssertionError(msg);\n    }\n}\n\nlet compression_function;\nlet decompression_function;\nfunction set_compression_function(fn) {\n    compression_function = fn;\n}\nfunction set_decompression_function(fn) {\n    decompression_function = fn;\n}\nfunction compress(input) {\n    assert(compression_function !== null, \"Compression function not specified\");\n    return compression_function(input);\n}\nfunction decompress(input) {\n    assert(decompression_function !== null, \"Decompression function not specified\");\n    return decompression_function(input);\n}\n\nfunction date_from_dos_time(date, time) {\n    const hours = ((time >> 11) & 0b11111);\n    const minutes = (time >> 5) & 0b111111;\n    const seconds = (time & 0b11111) << 1;\n    const year = ((date >> 9) & 0b1111111) + 1980;\n    const month = ((date >> 5) & 0b1111) - 1;\n    const day = (date & 0b11111);\n    return new Date(year, month, day, hours, minutes, seconds);\n}\nfunction dos_time_from_date(input) {\n    const hours = input.getHours();\n    const minutes = input.getMinutes();\n    const seconds = input.getSeconds();\n    const year = input.getFullYear() - 1980;\n    const month = input.getMonth() + 1;\n    const day = input.getDate();\n    const time = ((hours & 0b11111) << 11) | ((minutes & 0b111111) << 5) | ((seconds >> 1) & 0b11111);\n    const date = ((year & 0b1111111) << 9) | ((month & 0b1111) << 5) | (day & 0b11111);\n    return [date, time];\n}\n\nconst ZIP_VERSION = 20;\nconst inflated_entries = new WeakMap;\nclass ZipEntry {\n    constructor(blob, compression_type, size, crc) {\n        this.internal_file_attr = 0;\n        this.external_file_attr = 0;\n        this.bit_flag = 0;\n        this.modified = new Date;\n        this.compression = compression_type;\n        this.blob_slice = blob;\n        this.uncompressed_size = size;\n        this.crc = crc;\n    }\n    get is_compressed() {\n        return this.compression !== 0;\n    }\n    clone() {\n        const copy = new ZipEntry(this.blob_slice, this.compression, this.uncompressed_size, this.crc);\n        copy.modified = new Date(this.modified.getTime());\n        if (this.comment) {\n            copy.comment = this.comment.slice(0);\n        }\n        if (this.extra) {\n            copy.extra = this.extra.slice(0);\n        }\n        copy.bit_flag = this.bit_flag;\n        copy.external_file_attr = this.external_file_attr;\n        copy.internal_file_attr = this.internal_file_attr;\n        return copy;\n    }\n    get size() {\n        return this.uncompressed_size;\n    }\n    get compressed_size() {\n        return this.blob_slice.size;\n    }\n    async decompress() {\n        const existing = inflated_entries.get(this.blob_slice);\n        if (existing) {\n            return existing;\n        }\n        else {\n            const result = await decompress(this.blob_slice.get_blob());\n            inflated_entries.set(this.blob_slice, result);\n            return result;\n        }\n    }\n    generate_local(filename) {\n        const encoded_filename = encode_utf8_string(filename);\n        const N = encoded_filename.length;\n        const M = this.extra ? this.extra.length : 0;\n        const length = 30 + N + M;\n        const buffer = new ArrayBuffer(length);\n        const view = new DataView(buffer);\n        const uintview = new Uint8Array(buffer);\n        const [date, time] = dos_time_from_date(this.modified);\n        view.setUint32(0, HEADER_LOCAL, true);\n        view.setUint16(4, ZIP_VERSION, true);\n        view.setUint16(6, this.bit_flag, true);\n        view.setUint16(8, this.compression, true);\n        view.setUint16(10, time, true);\n        view.setUint16(12, date, true);\n        if (!(this.bit_flag & 0b1000)) {\n            view.setUint32(16, this.crc, true);\n            view.setUint32(20, this.compressed_size, true);\n            view.setUint32(24, this.uncompressed_size, true);\n        }\n        view.setUint16(26, encoded_filename.length, true);\n        view.setUint16(28, M, true);\n        uintview.set(encoded_filename, 30);\n        if (this.extra) {\n            uintview.set(this.extra, 30 + N);\n        }\n        return buffer;\n    }\n    generate_cd(filename, local_position) {\n        const encoded_filename = encode_utf8_string(filename);\n        const N = encoded_filename.length;\n        const M = this.extra ? this.extra.length : 0;\n        const K = this.comment ? this.comment.length : 0;\n        const length = 46 + M + N + K;\n        const buffer = new ArrayBuffer(length);\n        const view = new DataView(buffer);\n        const uintview = new Uint8Array(buffer);\n        const [date, time] = dos_time_from_date(this.modified);\n        view.setUint32(0, HEADER_CD, true);\n        view.setUint16(4, ZIP_VERSION, true);\n        view.setUint16(6, ZIP_VERSION, true);\n        view.setUint16(8, this.bit_flag & 0xFFFF, true);\n        view.setUint16(10, this.compression, true);\n        view.setUint16(12, time, true);\n        view.setUint16(14, date, true);\n        view.setUint32(16, this.crc, true);\n        view.setUint32(20, this.compressed_size, true);\n        view.setUint32(24, this.uncompressed_size, true);\n        view.setUint16(28, encoded_filename.length, true);\n        view.setUint16(30, M, true);\n        view.setUint16(32, K, true);\n        view.setUint16(34, 0, true);\n        view.setUint16(36, this.internal_file_attr & 0xFFFF, true);\n        view.setUint32(38, this.external_file_attr & 0xFFFFFFFF, true);\n        view.setUint32(42, local_position, true);\n        uintview.set(encoded_filename, 46);\n        if (this.extra) {\n            uintview.set(this.extra, 46 + N);\n        }\n        if (this.comment) {\n            uintview.set(this.comment, 46 + N + M);\n        }\n        return buffer;\n    }\n    generate_data_descriptor() {\n        const length = 16;\n        const buffer = new ArrayBuffer(length);\n        const view = new DataView(buffer);\n        view.setUint32(0, HEADER_DATA_DESCRIPTOR, true);\n        view.setUint32(4, this.crc, true);\n        view.setUint32(8, this.compressed_size, true);\n        view.setUint32(12, this.uncompressed_size, true);\n        return buffer;\n    }\n    get_backing_object() {\n        return this.blob_slice.get_blob();\n    }\n    async get_blob() {\n        if (this.compression === 8) {\n            return this.decompress();\n        }\n        assert(this.compression === 0, \"Incompatible compression type\");\n        return this.blob_slice.get_blob();\n    }\n    async get_array_buffer() {\n        const blob = await this.get_blob();\n        return await new Response(blob).arrayBuffer();\n    }\n    async get_string() {\n        const blob = await this.get_blob();\n        return await new Response(blob).text();\n    }\n}\n\nconst CRC_LOOKUP = new Uint32Array([\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F,\n    0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2,\n    0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,\n    0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,\n    0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423,\n    0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106,\n    0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D,\n    0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,\n    0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7,\n    0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA,\n    0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,\n    0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84,\n    0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,\n    0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E,\n    0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55,\n    0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28,\n    0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F,\n    0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,\n    0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69,\n    0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC,\n    0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693,\n    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D\n]);\nfunction crc32(bytes, crc = 0) {\n    let result = ~crc;\n    for (const v of bytes) {\n        result = CRC_LOOKUP[(result ^ v) & 0xFF] ^ (result >>> 8);\n    }\n    return (~result) >>> 0;\n}\n\nclass BlobSlice {\n    constructor(blob, offset = 0, length = blob.size) {\n        this.start = offset;\n        this.end = offset + length;\n        this.blob = blob;\n        this.is_whole = offset === 0 && length === blob.size;\n    }\n    get size() {\n        return this.end - this.start;\n    }\n    get_blob() {\n        if (this.is_whole) {\n            return this.blob;\n        }\n        return this.blob.slice(this.start, this.end);\n    }\n}\n\nconst MAX_TASK_TIME = 32;\nconst INTER_TASK_PAUSE = 16;\nconst support_performance = typeof performance === \"object\";\nlet last_system_time = 0;\nfunction get_increasing_time() {\n    if (support_performance) {\n        return performance.now();\n    }\n    else {\n        const system_time = Date.now();\n        if (last_system_time <= system_time) {\n            last_system_time += 0.1;\n        }\n        else {\n            last_system_time = system_time;\n        }\n        return last_system_time;\n    }\n}\nasync function pause(duration) {\n    return new Promise(resolve => setTimeout(resolve, duration));\n}\nclass ZipArchive {\n    constructor() {\n        this.entries = new Map;\n    }\n    has(file_name) {\n        const norm_name = this.normalise_file_name(file_name);\n        const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n        this.verify_path(trimmed_name);\n        return this.entries.has(trimmed_name + \"/\") || this.entries.has(trimmed_name);\n    }\n    is_folder(file_name) {\n        const norm_name = this.normalise_file_name(file_name);\n        const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n        this.verify_path(trimmed_name);\n        return this.entries.has(trimmed_name + \"/\");\n    }\n    get(file_name) {\n        const norm_name = this.normalise_file_name(file_name);\n        const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n        this.verify_path(trimmed_name);\n        return this.entries.get(trimmed_name) || this.entries.get(trimmed_name + \"/\");\n    }\n    delete(file_name) {\n        const norm_name = this.normalise_file_name(file_name);\n        const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n        this.verify_path(trimmed_name);\n        if (this.entries.has(trimmed_name + \"/\")) {\n            return this.entries.delete(trimmed_name + \"/\");\n        }\n        else {\n            return this.entries.delete(trimmed_name);\n        }\n    }\n    async set(file_name, file) {\n        this.verify_path(file_name);\n        const norm_name = this.normalise_file_name(file_name);\n        assert(!norm_name.endsWith(\"/\"), `Unable to create ZipEntry; target location \"${file_name}\" has a directory path.`);\n        assert(!this.entries.has(norm_name + \"/\"), `Unable to create ZipEntry; a folder exists at \"${file_name}\".`);\n        file = file instanceof Blob ? file : new Blob([file]);\n        const crc = await this.calculate_crc(file);\n        return this.set_internal(file_name, new BlobSlice(file), 0, file.size, crc);\n    }\n    set_folder(file_name) {\n        const norm_name = this.normalise_file_name(file_name);\n        const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n        this.verify_path(trimmed_name);\n        if (this.entries.has(trimmed_name)) {\n            throw new Error(`Unable to create ZipEntry; entry already exists at \"${trimmed_name}\".`);\n        }\n        const existing_entry = this.entries.get(trimmed_name + \"/\");\n        if (existing_entry) {\n            return existing_entry;\n        }\n        const empty_file = new BlobSlice(new Blob([]));\n        const crc = crc32(new Uint8Array(0));\n        const entry = new ZipEntry(empty_file, 0, 0, crc);\n        this.entries.set(trimmed_name + \"/\", entry);\n        return entry;\n    }\n    copy(from, to) {\n        const is_folder = this.is_folder(from);\n        const source = this.get(from);\n        assert(!!source, `Unable to copy ZipEntry; \"${from}\" doesn't exist in the archive.`);\n        const copy = source.clone();\n        if (is_folder) {\n            const norm_name = this.normalise_file_name(to);\n            const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n            this.verify_path(trimmed_name);\n            assert(this.entries.has(trimmed_name) === false, `Unable to copy ZipEntry; entry already exists at \"${trimmed_name}\".`);\n            assert(this.entries.has(trimmed_name + \"/\") === false, `Unable to copy ZipEntry; entry already exists at \"${trimmed_name}/\".`);\n            this.entries.set(trimmed_name + \"/\", copy);\n        }\n        else {\n            const norm_name = this.normalise_file_name(to);\n            this.verify_path(norm_name);\n            assert(!norm_name.endsWith(\"/\"), `Unable to copy ZipEntry; target location \"${to}\" has a directory path.`);\n            assert(!this.entries.has(norm_name + \"/\"), `Unable to copy ZipEntry; a folder exists at \"${norm_name}/\".`);\n            assert(!this.entries.has(norm_name), `Unable to copy ZipEntry; a entry already exists at \"${norm_name}\".`);\n            this.entries.set(norm_name, copy);\n        }\n        return copy;\n    }\n    move(from, to) {\n        const is_folder = this.is_folder(from);\n        const source = this.get(from);\n        assert(!!source, `Unable to move ZipEntry; \"${from}\" doesn't exist in the archive.`);\n        if (is_folder) {\n            const norm_name = this.normalise_file_name(to);\n            const trimmed_name = norm_name.endsWith(\"/\") ? norm_name.slice(0, -1) : norm_name;\n            this.verify_path(trimmed_name);\n            assert(this.entries.has(trimmed_name) === false, `Unable to move ZipEntry; entry already exists at \"${trimmed_name}\".`);\n            assert(this.entries.has(trimmed_name + \"/\") === false, `Unable to move ZipEntry; entry already exists at \"${trimmed_name}/\".`);\n            this.entries.set(trimmed_name + \"/\", source);\n            this.delete(from);\n        }\n        else {\n            const source = this.get(from);\n            assert(!!source, `Unable to move ZipEntry; \"${from}\" doesn't exist in the archive.`);\n            const norm_name = this.normalise_file_name(to);\n            this.verify_path(norm_name);\n            assert(!norm_name.endsWith(\"/\"), `Unable to move ZipEntry; target location \"${to}\" has a directory path.`);\n            assert(!this.entries.has(norm_name + \"/\"), `Unable to move ZipEntry; a folder exists at \"${norm_name}/\".`);\n            assert(!this.entries.has(norm_name), `Unable to move ZipEntry; an entry exists at \"${norm_name}\".`);\n            this.entries.set(norm_name, source);\n        }\n        return source;\n    }\n    async compress_entry(file_name) {\n        const entry = this.get(file_name);\n        assert(!!entry, `Unable to compress ZipEntry; entry \"${file_name}\" does not exist.`);\n        if (!entry.is_compressed) {\n            const blob = await entry.get_blob();\n            const original_size = blob.size;\n            const deflated_blob = await this.compress_blob(blob);\n            return this.set_internal(file_name, new BlobSlice(deflated_blob), 8, original_size, entry.crc);\n        }\n        return entry;\n    }\n    set_comment(str) {\n        const buffer = encode_utf8_string(str);\n        assert(buffer.byteLength < 0xFFFF, `Unable to set commment; comment is ${buffer.byteLength} bytes which exceeds maximum size of ${0xFFFE}.`);\n        this.comment = buffer;\n    }\n    to_blob() {\n        const parts = [];\n        let offset = 0;\n        const directories = [];\n        for (const [name, entry] of this.entries) {\n            const location = offset;\n            const local = entry.generate_local(name);\n            const file = entry.get_backing_object();\n            offset += local.byteLength + file.size;\n            parts.push(local, file);\n            if (entry.bit_flag & 0b1000) {\n                const data_descriptor = entry.generate_data_descriptor();\n                parts.push(data_descriptor);\n                offset += data_descriptor.byteLength;\n            }\n            const cd = entry.generate_cd(name, location);\n            directories.push(cd);\n        }\n        const cd_offset = offset;\n        let cd_length = 0;\n        for (const cd of directories) {\n            parts.push(cd);\n            cd_length += cd.byteLength;\n        }\n        const eocdr = this.generate_eocdr(cd_offset, cd_length, directories.length);\n        parts.push(eocdr);\n        return new Blob(parts);\n    }\n    files() {\n        const entries = Array.from(this.entries.entries());\n        return entries.values();\n    }\n    static async from_blob(blob) {\n        const archive = new ZipArchive;\n        const buffer = await new Response(blob).arrayBuffer();\n        const view = new DataView(buffer);\n        const eocdr_position = this.find_eocdr(view);\n        const eocdr = this.read_eocdr(view, eocdr_position);\n        let position = 0;\n        const offset = eocdr.cd_offset;\n        const length = eocdr.cd_length;\n        let task_start_time = get_increasing_time();\n        while (position < length) {\n            const signature = view.getUint32(position + offset, true);\n            assert(signature === HEADER_CD, \"Expected CD header\");\n            const entry = this.read_cd(view, position + offset);\n            position += entry.size;\n            if (entry.file_name.endsWith(\"/\")) {\n                archive.set_folder(entry.file_name);\n            }\n            else {\n                const { data_location } = this.read_local(view, entry.local_position);\n                const { uncompressed_size, compressed_size, compression, flag, file_name, internal, external, crc, extra, comment } = entry;\n                archive.verify_path(file_name);\n                const blob_slice = new BlobSlice(blob, data_location, compressed_size);\n                const zip_entry = archive.set_internal(file_name, blob_slice, compression, uncompressed_size, crc);\n                zip_entry.bit_flag = flag;\n                zip_entry.internal_file_attr = internal;\n                zip_entry.external_file_attr = external;\n                zip_entry.extra = extra;\n                zip_entry.comment = comment;\n                zip_entry.modified = date_from_dos_time(entry.date, entry.time);\n                const current_time = get_increasing_time();\n                const delta_time = current_time - task_start_time;\n                if (delta_time > MAX_TASK_TIME) {\n                    await pause(INTER_TASK_PAUSE);\n                    task_start_time = get_increasing_time();\n                }\n            }\n        }\n        return archive;\n    }\n    static set_compression_function(fn) {\n        set_compression_function(fn);\n    }\n    static set_decompression_function(fn) {\n        set_decompression_function(fn);\n    }\n    static read_local(view, position) {\n        const signature = view.getUint32(position, true);\n        assert(signature === HEADER_LOCAL, \"Expected Local Directory Record signature\");\n        const version = view.getUint16(position + 4, true);\n        const flag = view.getUint16(position + 6, true);\n        const compression = view.getUint16(position + 8, true);\n        const time = view.getUint16(position + 10, true);\n        const date = view.getUint16(position + 12, true);\n        const crc = view.getUint32(position + 14, true);\n        const compressed_size = view.getUint32(position + 18, true);\n        const uncompressed_size = view.getUint32(position + 22, true);\n        const name_length = view.getUint16(position + 26, true);\n        const extra_length = view.getUint16(position + 28, true);\n        const file_name = decode_utf8_string(view.buffer, position + 30, name_length);\n        const extra = new Uint8Array(view.buffer, position + 30 + name_length, extra_length);\n        const data_location = position + 30 + name_length + extra_length;\n        return {\n            version,\n            flag,\n            compression,\n            time,\n            date,\n            crc,\n            compressed_size,\n            uncompressed_size,\n            file_name,\n            extra,\n            data_location\n        };\n    }\n    static read_cd(view, position) {\n        const signature = view.getUint32(position, true);\n        assert(signature === HEADER_CD, \"Expected Central Directory Record signature\");\n        const version = view.getUint16(position + 4, true);\n        const min_version = view.getUint16(position + 6, true);\n        const flag = view.getUint16(position + 8, true);\n        const compression = view.getUint16(position + 10, true);\n        const time = view.getUint16(position + 12, true);\n        const date = view.getUint16(position + 14, true);\n        const crc = view.getUint32(position + 16, true);\n        const compressed_size = view.getUint32(position + 20, true);\n        const uncompressed_size = view.getUint32(position + 24, true);\n        const name_length = view.getUint16(position + 28, true);\n        const extra_length = view.getUint16(position + 30, true);\n        const comment_length = view.getUint16(position + 32, true);\n        const disk = view.getUint16(position + 34, true);\n        const internal = view.getUint16(position + 36, true);\n        const external = view.getUint32(position + 38, true);\n        const local_position = view.getUint32(position + 42, true);\n        const file_name = decode_utf8_string(view.buffer, position + 46, name_length);\n        const extra = new Uint8Array(view.buffer, position + 46 + name_length, extra_length);\n        const comment = new Uint8Array(view.buffer, position + 46 + name_length + extra_length, comment_length);\n        const size = 46 + name_length + extra_length + comment_length;\n        if (compression === 0) {\n            assert(compressed_size === uncompressed_size, \"ucsize != csize for STORED entry\");\n        }\n        return {\n            version,\n            min_version,\n            flag,\n            compression,\n            time,\n            date,\n            crc,\n            compressed_size,\n            uncompressed_size,\n            disk,\n            internal,\n            external,\n            local_position,\n            file_name,\n            extra,\n            comment,\n            size\n        };\n    }\n    static find_eocdr(view) {\n        const length = view.byteLength;\n        for (let i = 22; i < 0xFFFF; i++) {\n            const position = length - i;\n            if (view.getUint32(position, true) == HEADER_EOCDR) {\n                return position;\n            }\n        }\n        throw new Error(\"No end of central directory record found\");\n    }\n    static read_eocdr(view, position) {\n        const signature = view.getUint32(position, true);\n        assert(signature === HEADER_EOCDR, \"Expected End of Central Directory Record signature\");\n        const disk = view.getUint16(position + 4, true);\n        const start_disk = view.getUint16(position + 6, true);\n        const disk_entries = view.getUint16(position + 8, true);\n        const total_entries = view.getUint16(position + 10, true);\n        const cd_length = view.getUint32(position + 12, true);\n        const cd_offset = view.getUint32(position + 16, true);\n        const comment_length = view.getUint16(position + 20, true);\n        assert(start_disk === 0, \"Invalid start disk\");\n        assert(disk_entries === total_entries, \"Multi-disk archives are not supported\");\n        assert(position + 22 + comment_length === view.byteLength, \"Invalid comment length\");\n        const comment = decode_utf8_string(view.buffer, position + 22, comment_length);\n        return {\n            disk,\n            start_disk,\n            disk_entries,\n            total_entries,\n            cd_length,\n            cd_offset,\n            comment\n        };\n    }\n    generate_eocdr(cd_location, cd_size, records) {\n        const N = this.comment ? this.comment.length : 0;\n        const length = 22 + N;\n        const buffer = new ArrayBuffer(length);\n        const view = new DataView(buffer);\n        const uintview = new Uint8Array(buffer);\n        view.setUint32(0, HEADER_EOCDR, true);\n        view.setUint16(4, 0, true);\n        view.setUint16(6, 0, true);\n        view.setUint16(8, records, true);\n        view.setUint16(10, records, true);\n        view.setUint32(12, cd_size, true);\n        view.setUint32(16, cd_location, true);\n        view.setUint16(20, N, true);\n        if (this.comment) {\n            uintview.set(this.comment, 22);\n        }\n        return buffer;\n    }\n    async calculate_crc(blob) {\n        const buffer = await new Response(blob).arrayBuffer();\n        const bytes = new Uint8Array(buffer);\n        return crc32(bytes);\n    }\n    set_internal(file_name, file, compresion, size, crc) {\n        const norm_file_name = this.normalise_file_name(file_name);\n        const entry = new ZipEntry(file, compresion, size, crc);\n        this.entries.set(norm_file_name, entry);\n        return entry;\n    }\n    normalise_file_name(file_name) {\n        const slash_regex = /[\\\\|/]/g;\n        return file_name.replace(slash_regex, \"/\");\n    }\n    verify_path(name) {\n        const slash_regex = /[\\\\|/]/g;\n        const part_regex = /^[^/\\0]+$/;\n        const parts = name.split(slash_regex);\n        for (const part of parts) {\n            assert(part_regex.test(part) || part === \"..\" || part === \".\", `Invalid path \"${name}\"`);\n        }\n    }\n    async compress_blob(file) {\n        return await compress(file);\n    }\n}\n\nconst worker_string = `\nconst wasm_binary_string = \"data:application/wasm;base64,\";\n\nconst wasm_instance_promise = (async () => {\n\tif (WebAssembly.instantiateStreaming) {\n\t\tconst { instance } = await WebAssembly.instantiateStreaming(fetch(wasm_binary_string));\n\t\treturn instance.exports;\n\t}\n\telse {\n\t\tconst res = await fetch(wasm_binary_string);\n\t\tconst buffer = await res.arrayBuffer();\n\t\tconst { instance } = await WebAssembly.instantiate(buffer);\n\t\treturn instance.exports;\n\t}\n})();\n\naddEventListener(\"message\", async message_event => {\n\tconst { data } = message_event; \n\tconst inst = await wasm_instance_promise;\n\t\n\tconst { operation, blob } = data;\n\tconst buffer = await new Response(blob).arrayBuffer();\n\tconst uint_array = new Uint8Array(buffer);\n\t\n\tlet result;\n\tswitch (operation) {\n\t\tcase \"encode\":\n\t\tresult = deflate_encode(inst, uint_array);\n\t\tbreak;\n\t\tcase \"decode\":\n\t\tresult = deflate_decode(inst, uint_array);\n\t\tbreak;\n\t}\n\t\n\tpostMessage(new Blob([result]));\n});\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory(wasm) {\n\tif (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n\t\tcachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n\t}\n\treturn cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(wasm, arg) {\n\tconst ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\tgetUint8Memory(wasm).set(arg, ptr / 1);\n\tWASM_VECTOR_LEN = arg.length;\n\treturn ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory(wasm) {\n\tif (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n\t\tcachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n\t}\n\treturn cachegetInt32Memory;\n}\n\nfunction getArrayU8FromWasm(wasm, ptr, len) {\n\treturn getUint8Memory(wasm).subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction deflate_decode(wasm, base_compressed) {\n\tconst retptr = 8;\n\tconst ret = wasm.deflate_decode(retptr, passArray8ToWasm(wasm, base_compressed), WASM_VECTOR_LEN);\n\tconst memi32 = getInt32Memory(wasm);\n\tconst v0 = getArrayU8FromWasm(wasm, memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n\twasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n\treturn v0;\n}\n\nfunction deflate_encode(wasm, base_raw) {\n\tconst retptr = 8;\n\tconst ret = wasm.deflate_encode(retptr, passArray8ToWasm(wasm, base_raw), WASM_VECTOR_LEN);\n\tconst memi32 = getInt32Memory(wasm);\n\tconst v0 = getArrayU8FromWasm(wasm, memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n\twasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n\treturn v0;\n}\n`;\nconst queue = [];\nlet cached_worker;\nfunction create_worker() {\n    const blob = new Blob([worker_string], {\n        type: \"application/wasm\"\n    });\n    const url = URL.createObjectURL(blob);\n    const worker = new Worker(url);\n    worker.addEventListener(\"message\", e => {\n        const blob = e.data;\n        const resolver = queue.shift();\n        resolver(blob);\n    });\n    return worker;\n}\nfunction get_worker() {\n    if (!cached_worker) {\n        cached_worker = create_worker();\n    }\n    return cached_worker;\n}\nfunction compress$1(input) {\n    return new Promise((resolve) => {\n        const worker = get_worker();\n        worker.postMessage({\n            blob: input,\n            operation: \"encode\"\n        });\n        queue.push(resolve);\n    });\n}\nfunction decompress$1(input) {\n    return new Promise((resolve) => {\n        const worker = get_worker();\n        worker.postMessage({\n            blob: input,\n            operation: \"decode\"\n        });\n        queue.push(resolve);\n    });\n}\nZipArchive.set_compression_function(compress$1);\nZipArchive.set_decompression_function(decompress$1);\n\nexport { ZipArchive, ZipEntry };\n","import React, { ReactNode } from \"react\";\nimport \"./Toolbar.css\";\n\nexport default function Toolbar ({ children }: { children: ReactNode}) {\n\treturn <div className=\"toolbar\">{ children }</div>;\n}","import React, { ChangeEventHandler, MouseEventHandler } from \"react\";\nimport \"./Button.css\";\n\ntype ButtonProperties = {\n\ttext: string,\n\ttype?: \"file\"|\"button\",\n\tdisabled?: boolean,\n\tfocusable?: boolean\n\tclassName?: string,\n\tonChange?: ChangeEventHandler,\n\tonClick?: MouseEventHandler\n};\n\nexport default function Button ({ text, type = \"button\", onClick, onChange, focusable = true, disabled = false, className = \"\" }: ButtonProperties) {\n\treturn <label className={\"button \" + className} tabIndex={focusable ? 0 : -1} data-disabled={disabled}>{text}<input disabled={disabled} type={type} onClick={onClick} onChange={onChange}/></label>;\n}","import React, { useState } from \"react\";\nimport { ZipArchive } from \"../zip_default\";\nimport \"./LoadArchive.css\";\nimport Toolbar from \"./Toolbar\";\nimport Button from \"./Button\";\n\nexport default function LoadArchive ({ setArchive }: { setArchive: (archive?: ZipArchive) => void}) {\n\n\tconst [isBusy, setBusy] = useState(false);\n\tconst [errMessage, setError] = useState(\"\");\n\tconst [isDragActive, setDragActive] = useState(false);\n\t\n\tconst on_drop = (e: React.DragEvent) => {\n\t\te.preventDefault();\n\t\tconst files = files_from_data_transfer(e.dataTransfer);\n\n\t\tif (files.length > 1) {\n\t\t\tsetError(\"Please drop only 1 file\");\n\t\t}\n\t\telse if (files.length === 1) {\n\t\t\tattempt_read_archive(files[0]!);\n\t\t}\n\t};\n\tconst on_drag_over = (e: React.DragEvent) => {\n\t\te.preventDefault();\n\t\tsetDragActive(true);\n\t};\n\tconst on_drag_leave = (e: React.DragEvent) => setDragActive(false);\n\n\tconst on_file_selected = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst files = e.target.files;\n\t\tif (!files) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (files.length > 1) {\n\t\t\tsetError(\"Please drop only 1 file\");\n\t\t}\n\t\telse if (files.length === 1) {\n\t\t\tattempt_read_archive(files[0]!);\n\t\t}\n\t};\n\n\tconst attempt_read_archive = async (file: File) => {\n\t\tsetBusy(true);\n\t\tsetError(\"\");\n\t\tsetDragActive(false);\n\t\ttry {\n\t\t\tconst archive = await ZipArchive.from_blob(file);\n\t\t\tsetBusy(false);\n\t\t\tsetArchive(archive);\n\t\t}\n\t\tcatch (e) {\n\t\t\tsetBusy(false);\n\t\t\tsetError(\"Unable to read the file, is it a ZIP file?\")\n\t\t}\n\t};\n\n\tconst create_new_archive = () => {\n\t\tconst archive = new ZipArchive();\n\t\tsetArchive(archive);\n\t};\n\n\tlet text = 'Drop a ZIP file here, or pick an option above to get started.';\n\n\tif (isBusy) {\n\t\ttext = \"Processing file...\";\n\t}\n\telse if (isDragActive) {\n\t\ttext = \"Drop file here...\";\n\t}\n\telse if (errMessage !== \"\") {\n\t\ttext = errMessage;\n\t}\n\n\treturn <>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Create New\" type=\"button\" onClick={create_new_archive}/>\n\t\t\t<Button text=\"Pick File\" type=\"file\" onChange={on_file_selected}/>\n\t\t</Toolbar>\n\t\t<div className=\"load-archive__drop-zone\" onDrop={on_drop} onDragOver={on_drag_over} onDragLeave={on_drag_leave}>\n\t\t\t{text}\n\t\t</div>\n\t</>;\n}\n\nfunction files_from_data_transfer (data_transfer: DataTransfer) {\n\tconst files = [];\n\tif (data_transfer.items) {\n\t\t\tfor (const item of data_transfer.items) {\n\t\t\t\t\tif (item.kind === 'file') {\n\t\t\t\t\t\t\tfiles.push(item.getAsFile());\n\t\t\t\t\t}\n\t\t\t}\n\t} else {\n\t\t\tfor (const file of data_transfer.files) {\n\t\t\t\t\tfiles.push(file);\n\t\t\t}\n\t}\n\treturn files;\n}","import { ReactNode } from \"react\";\nimport React from \"react\";\nimport \"./Dialog.css\";\n\nexport default function Dialog ({ open, children, handleClose }: { open: boolean, children: ReactNode, handleClose: () => void}) {\n\treturn open ? <>\n\t\t<div className=\"dialog-dimmer\" onClick={handleClose}></div>\n\t\t<div className=\"dialog\">{children}</div>\n\t</> : null;\n}","import Dialog from \"./Dialog\";\nimport React, { ReactNode } from \"react\";\n\ntype CloseHandler = () => void;\ntype MenuDialogProperties = {\n\tonClose: CloseHandler,\n\tchildren: ReactNode \n};\n\nexport default function MenuDialog ({ onClose, children }: MenuDialogProperties) {\n\treturn <Dialog open={true} handleClose={onClose}>\n\t\t{children}\n\t</Dialog>\n}","import React, { useState, MouseEvent } from \"react\";\nimport \"./EntryList.css\";\nimport MenuDialog from \"./MenuDialog\";\nimport Button from \"./Button\";\n\ntype Entry = {\n\tpath: string,\n\tfilename: string,\n\tisFolder: boolean,\n\tsize: number,\n\tgetBlob: () => Promise<Blob>\n}\n\ntype EntryListProperties = {\n\tentries: Entry[],\n\tcwd: string,\n\tsetCWD: (cwd: string) => void,\n\tsetDownload: (download: [Blob, string]|null) => void,\n\tdeleteFile: (path: string) => void\n}\n\nexport default function EntryList ({ entries, cwd, setCWD, setDownload, deleteFile }: EntryListProperties) {\n\tconst [menuEntry, setMenuEntry] = useState<Entry|null>(null);\n\tconst [isBusy, setBusy] = useState(false);\n\tconst filtered_entries: Entry[] = [];\n\tconst cwd_path = cwd + \"/\";\n\n\tfor (const entry of entries) {\n\t\tif (entry.path !== cwd_path && entry.path.startsWith(cwd)) {\n\t\t\tconst relative_path = entry.path.slice(cwd.length + 1);\n\t\t\tconst slash_index = relative_path.indexOf(\"/\");\n\t\t\tif (slash_index < 0 || slash_index === relative_path.length - 1) {\n\t\t\t\tfiltered_entries.push(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst onDoubleClick = (entry: Entry) => {\n\t\tif (entry.isFolder) {\n\t\t\tif (cwd === \"\") {\n\t\t\t\tsetCWD(entry.filename);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetCWD(`${cwd}/${entry.filename}`);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst onRightClick = (entry: Entry) => {\n\t\tsetMenuEntry(entry);\n\t};\n\n\tconst createMenu = () => {\n\t\tif (!menuEntry || menuEntry.isFolder) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst downloadEntry = async () => {\n\t\t\tconst entry = menuEntry;\n\t\t\tsetBusy(true);\n\t\t\tsetMenuEntry(null);\n\t\t\tconst blob = await entry.getBlob();\n\t\t\tsetBusy(false);\n\t\t\tsetDownload([blob, entry.filename]);\n\t\t};\n\n\t\tconst deleteEntry = () => {\n\t\t\tconst entry = menuEntry;\n\t\t\tsetMenuEntry(null);\n\t\t\tdeleteFile(entry.path);\n\t\t};\n\n\t\treturn <MenuDialog onClose={() => setMenuEntry(null)}>{\n\t\t\t<>\n\t\t\t\t<Button disabled={isBusy} className=\"menu-button\" text=\"Download\" onClick={downloadEntry}/>\n\t\t\t\t<Button disabled={isBusy} className=\"menu-button\" text=\"Delete\" onClick={deleteEntry}/>\n\t\t\t\t<Button disabled={isBusy} text=\"Cancel\" onClick={() => setMenuEntry(null)}/>\n\t\t\t</>\n\t\t}</MenuDialog>\n\t}\n\n\treturn <>\n\t\t{createMenu()}\n\t\t<div className=\"entry-list\">{\n\t\t\tfiltered_entries.map(entry => {\n\t\t\t\treturn <EntryListRow onContextMenu={onRightClick} onDoubleClick={onDoubleClick} key={entry.path} entry={entry}/>\n\t\t\t})\n\t\t}</div>\n\t</>;\n}\n\ntype EntryListRowProperties = {\n\tentry: Entry,\n\tonDoubleClick: (entry: Entry) => void,\n\tonContextMenu: (entry: Entry) => void\n}\n\nexport function EntryListRow ({ entry, onDoubleClick, onContextMenu }: EntryListRowProperties) {\n\n\tconst ctxHandler = (e: MouseEvent) => {\n\t\te.preventDefault();\n\t\tonContextMenu(entry);\n\t}\n\treturn <div onContextMenu={ctxHandler} onDoubleClick={() => onDoubleClick(entry)} className=\"entry-list-row\">\n\t\t<div className=\"entry-list-cell\" style={ { width: \"20px\" } }>{entry.isFolder ? \"📁\" : \"\"}</div>\n\t\t<div className=\"entry-list-cell\" style={ { width: \"100px\" } }>{entry.isFolder ? \"\" : formatBytes(entry.size)}</div>\n\t\t<div className=\"entry-list-flex-cell\">{entry.filename}</div>\n\t</div>\n}\n\nfunction formatBytes (bytes: number): string {\n\tif (bytes > 1e9) {\n\t\treturn Math.floor(bytes / 1e9) + \" GBytes\";\n\t}\n\telse if (bytes > 1e6) {\n\t\treturn Math.floor(bytes / 1e6) + \" MBytes\";\n\t}\n\telse if (bytes > 1e3) {\n\t\treturn Math.floor(bytes / 1e3) + \" KBytes\";\n\t}\n\telse {\n\t\treturn bytes + \" Bytes\";\n\t}\n}","import { ChangeEventHandler } from \"react\"\nimport React from \"react\"\nimport \"./TextField.css\"\n\ntype TextFieldProperties = {\n\tvalue: string,\n\tlabel?: string,\n\terror?: boolean,\n\tonChange?: ChangeEventHandler\n}\n\nexport default function TextField ({ value, label = \"\", onChange, error = false }: TextFieldProperties) {\n\treturn <label className={error ? \"text-field error\" : \"text-field\"}>\n\t\t<div>{label}</div>\n\t\t<input type=\"text\" value={value}  onChange={onChange}/>\n\t</label>\n}","import Dialog from \"./Dialog\";\nimport React, { useState, ChangeEvent } from \"react\";\nimport Button from \"./Button\";\nimport TextField from \"./TextField\";\n\ntype CloseHandler = (filename: string, blob: Blob | null) => void;\n\ntype NewFileDialogProperties = {\n\topen: boolean,\n\tonClose: CloseHandler\n};\n\nexport default function NewFileDialog ({ open, onClose }: NewFileDialogProperties) {\n\tconst [filename, setFilename] = useState(\"\");\n\tconst [file, setFile] = useState<Blob|null>(null);\n\n\tconst onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetFilename(e.target.value)\n\t};\n\n\tconst onFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tconst files = e.target.files;\n\t\tif (files && files[0]) {\n\t\t\tsetFile(files[0]);\n\t\t\tsetFilename(files[0].name);\n\t\t}\n\t\telse {\n\t\t\tsetFile(null);\n\t\t\tsetFilename(\"\");\n\t\t}\n\t};\n\n\tconst handleCancel = () => {\n\t\tonClose(\"\", null);\n\t\tsetFilename(\"\");\n\t\tsetFile(null);\n\t}\n\n\tconst handleClose = () => {\n\t\tonClose(filename.trim(), file);\n\t\tsetFilename(\"\");\n\t\tsetFile(null);\n\t};\n\n\tconst invalidFilename = validateFilename(filename) === false;\n\tconst isDisabled = file === null || invalidFilename;\n\n\treturn <Dialog open={open} handleClose={handleCancel}>\n\t\t<div>\n\t\t\t<TextField error={invalidFilename} label=\"File Name\" value={filename} onChange={onNameChange}/>\n\t\t\t<Button text=\"Choose\" type=\"file\"\tonChange={onFileChange}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<Button text=\"Create\" disabled={isDisabled} type=\"button\" onClick={handleClose}/>\n\t\t\t<Button text=\"Cancel\" type=\"button\" onClick={handleCancel}/>\n\t\t</div>\n\t</Dialog>\n}\n\nfunction validateFilename (filename: string) {\n\tfilename = filename.trim();\n\tconst slashRegex = /\\\\|\\//g;\n\tif (slashRegex.test(filename)) {\n\t\treturn false;\n\t}\n\tif (filename === \".\" || filename === \"..\" || filename === \"\") {\n\t\treturn false;\n\t}\n\treturn true;\n}","import Dialog from \"./Dialog\";\nimport React, { useState, ChangeEvent } from \"react\";\nimport Button from \"./Button\";\nimport TextField from \"./TextField\";\n\ntype CloseHandler = (filename: string) => void;\n\ntype NewFileDialogProperties = {\n\topen: boolean,\n\tonClose: CloseHandler\n};\n\nexport default function NewFolderDialog ({ open, onClose }: NewFileDialogProperties) {\n\tconst [foldername, setFoldername] = useState(\"\");\n\n\tconst onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetFoldername(e.target.value)\n\t};\n\n\tconst handleCancel = () => {\n\t\tonClose(\"\")\n\t\tsetFoldername(\"\");\n\t}\n\tconst handleClose = () => {\n\t\tonClose(foldername.trim());\n\t\tsetFoldername(\"\");\n\t};\n\tconst invalidFilename = validateFilename(foldername) === false;\n\n\treturn <Dialog open={open} handleClose={handleCancel}>\n\t\t<TextField error={invalidFilename} label=\"Folder Name\" value={foldername} onChange={onNameChange}/>\n\t\t<div>\n\t\t\t<Button text=\"Create\" disabled={invalidFilename} type=\"button\" onClick={handleClose}/>\n\t\t\t<Button text=\"Cancel\" type=\"button\" onClick={handleCancel}/>\n\t\t</div>\n\t</Dialog>\n}\n\nfunction validateFilename (filename: string) {\n\tfilename = filename.trim();\n\tconst slashRegex = /\\\\|\\//g;\n\tif (slashRegex.test(filename)) {\n\t\treturn false;\n\t}\n\tif (filename === \".\" || filename === \"..\" || filename === \"\") {\n\t\treturn false;\n\t}\n\treturn true;\n}","import React from \"react\"\nimport \"./Download.css\";\nimport Button from \"./Button\";\n\ntype DownloadProperties = {\n\turl: string,\n\tdownload: string,\n\ttext: string,\n\tdisabled?: boolean\n}\n\nexport default function Download ({ url, download, text, disabled = false }: DownloadProperties) {\n\treturn disabled ? \n\t\t<Button text={text} type=\"button\"/> :\n\t\t<a className=\"download\" href={url} download={download}>{text}</a>\n}","import Dialog from \"./Dialog\";\nimport React, { useState, ChangeEvent, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport TextField from \"./TextField\";\nimport Download from \"./Download\";\n\ntype CloseHandler = () => void;\n\ntype DownloadDialogProperties = {\n\tdownload: [Blob, string],\n\tonClose: CloseHandler\n};\n\nexport default function DownloadDialog ({ download, onClose }: DownloadDialogProperties) {\n\tconst [blob, default_filename] = download;\n\tconst [filename, setFilename] = useState(default_filename);\n\tconst [url, setURL] = useState<string>(\"\");\n\tuseEffect(() => {\n\t\tconst url = URL.createObjectURL(blob)\n\t\tsetURL(url);\n\t\treturn () => {\n\t\t\tsetURL(\"\");\n\t\t\tURL.revokeObjectURL(url);\n\t\t}\n\t}, [blob, setURL])\n\n\tconst onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetFilename(e.target.value)\n\t};\n\n\tconst handleClose = () => {\n\t\tonClose();\n\t\tsetFilename(\"\");\n\t};\n\n\tconst isDisabled = filename.trim().length === 0 && url !== null;\n\n\treturn <Dialog open={true} handleClose={handleClose}>\n\t\t<TextField label=\"File Name\" value={filename} onChange={onNameChange}/>\n\t\t<div>\n\t\t\t<Download text=\"Download\" disabled={isDisabled} url={url} download={filename}/>\n\t\t\t<Button text=\"Close\" type=\"button\" onClick={handleClose}/>\n\t\t</div>\n\t</Dialog>\n}","import React, { useState } from \"react\";\nimport { ZipArchive } from \"../zip_default\";\nimport Toolbar from \"./Toolbar\";\nimport EntryList from \"./EntryList\";\nimport Button from \"./Button\";\nimport NewFileDialog from \"./NewFileDialog\";\nimport NewFolderDialog from \"./NewFolderDialog\";\nimport DownloadDialog from \"./DownloadDialog\";\n\nexport default function ShowArchive ({ archive, setArchive }: {archive: ZipArchive, setArchive: (archive?: ZipArchive) => void}) {\n\tconst [changeIndex, setChangeIndex] = useState(0);\n\tconst [cwd, setCWD] = useState(\"\");\n\tconst [isCreateFileOpen, setCreateFileOpen] = useState(false);\n\tconst [isCreateFolderOpen, setCreateFolderOpen] = useState(false);\n\tconst [download, setDownload] = useState<[Blob,string]|null>(null);\n\n\tconst hasChanged = () => changeIndex > 0;\n\tconst incrementChange = () => setChangeIndex(changeIndex + 1);\n\n\tconst closeArchive = () => {\n\t\tif (hasChanged()) {\n\t\t\t// TODO this should be a better dialog\n\t\t\tconst result = window.confirm(`The archive has been modified, are you sure you want to close it?`);\n\t\t\tif (result === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tsetArchive();\n\t};\n\n\tconst onCreateFile = async (name: string, file: Blob|null) => {\n\t\tsetCreateFileOpen(false);\n\t\tif (name === \"\") {\n\t\t\treturn;\n\t\t}\n\t\tawait archive.set(cwd === \"\" ? name : cwd + \"/\" + name, file);\n\t\tincrementChange();\n\t};\n\n\tconst onCreateFolder = (name: string) => {\n\t\tsetCreateFolderOpen(false);\n\t\tif (name === \"\") {\n\t\t\treturn;\n\t\t}\n\t\tarchive.set_folder(cwd === \"\" ? name : cwd + \"/\" + name);\n\t\tincrementChange();\n\t};\n\n\tconst downloadArchive = () => {\n\t\tconst blob = archive.to_blob();\n\t\tsetDownload([blob, \"archive.zip\"]);\n\t};\n\n\tconst deleteFile = (path: string) => {\n\t\tarchive.delete(path);\n\t\tincrementChange();\n\t};\n\n\tconst goUpLevel = () => {\n\t\tconst i = cwd.lastIndexOf(\"/\");\n\t\tif (i < 0) {\n\t\t\tsetCWD(\"\")\n\t\t}\n\t\telse {\n\t\t\tsetCWD(cwd.slice(0, i));\n\t\t}\n\t};\n\n\tconst isRoot = cwd === \"\";\n\n\tconst entries = getArchiveEntries(archive);\n\n\tlet download_dialog = null;\n\t\n\tif (download) {\n\t\tdownload_dialog = <DownloadDialog download={download} onClose={() => setDownload(null)}/>;\n\t}\n\n\treturn <>\n\t\t<Toolbar>\n\t\t\t<Button text=\"New File\" type=\"button\" onClick={() => setCreateFileOpen(true)}/>\n\t\t\t<Button text=\"New Folder\" type=\"button\" onClick={() => setCreateFolderOpen(true)}/>\n\t\t\t<Button text=\"Download\" type=\"button\" onClick={downloadArchive}/>\n\t\t\t<Button text=\"Home\" type=\"button\" disabled={isRoot} onClick={() => setCWD(\"\")}/>\n\t\t\t<Button text=\"Up\" type=\"button\" disabled={isRoot} onClick={goUpLevel}/>\n\t\t\t<Button text=\"Close\" type=\"button\" onClick={closeArchive}/>\n\t\t</Toolbar>\n\t\t<NewFolderDialog open={isCreateFolderOpen} onClose={onCreateFolder}/>\n\t\t<NewFileDialog open={isCreateFileOpen} onClose={onCreateFile}/>\n\t\t{download_dialog}\n\t\t<EntryList entries={entries} setDownload={setDownload} deleteFile={deleteFile} setCWD={setCWD} cwd={cwd}/>\n\t</>;\n}\n\ntype Entry = {\n\tpath: string,\n\tfilename: string,\n\tisFolder: boolean,\n\tsize: number,\n\tgetBlob: () => Promise<Blob>\n}\n\nfunction getArchiveEntries (archive: ZipArchive) {\n\tconst entries = []\n\tfor (const [path, entry] of archive.files()) {\n\t\tconst [filename, isFolder] = getFileName(path);\n\t\tentries.push({\n\t\t\tpath: path,\n\t\t\tfilename,\n\t\t\tisFolder,\n\t\t\tsize: entry.size,\n\t\t\tgetBlob: () => entry.get_blob()\n\t\t});\n\t}\n\treturn sortEntries(entries);\n}\n\nfunction getFileName (path: string): [string, boolean] {\n\tlet slash_index = path.lastIndexOf(\"/\");\n\tconst is_folder = slash_index === path.length - 1;\n\t\n\tif (is_folder) {\n\t\tpath = path.slice(0, -1);\n\t}\n\n\tslash_index = path.lastIndexOf(\"/\");\n\n\tif (slash_index > -1) {\n\t\tpath = path.slice(slash_index + 1);\n\t}\n\n\treturn [path, is_folder];\n}\n\nfunction sortEntries (entries: Entry[]): Entry[] {\n\treturn entries.sort((a: Entry, b: Entry) => {\n\t\tif (a.isFolder && b.isFolder) {\n\t\t\tif (a.filename > b.filename) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if (b.filename > a.filename) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse if (a.isFolder) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.isFolder) {\n\t\t\treturn 1;\n\t\t}\n\t\telse {\n\t\t\tif (a.filename > b.filename) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if (b.filename > a.filename) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t})\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { ZipArchive } from './zip_default';\nimport LoadArchive from './components/LoadArchive';\nimport ShowArchive from './components/ShowArchive';\n\ntype AppProps = { initial_archive?: ZipArchive };\n\nfunction App ({ initial_archive }: AppProps) {\n\tconst [archive, setArchive] = useState(initial_archive);\n\n\treturn <div className=\"app\">\n\t\t<h1>WebZIP</h1>\n\t\t{\n\t\tarchive ? \n\t\t\t<ShowArchive archive={archive} setArchive={setArchive}/> : \n\t\t\t<LoadArchive setArchive={setArchive}/>\n\t\t}\n\t</div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./fonts/Oswald-Medium.ttf\";\nimport \"./fonts/SourceCodePro-Medium.ttf\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}